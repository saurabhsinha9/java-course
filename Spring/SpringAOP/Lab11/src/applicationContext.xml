<?xml version="1.0" encoding="UTF-8"?>
	<beans
	xmlns="http://www.springframework.org/schema/beans"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	 http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	 
	 http://www.springframework.org/schema/context
	 http://www.springframework.org/schema/context/spring-context-3.0.xsd
	 
	 http://www.springframework.org/schema/aop
	 http://www.springframework.org/schema/aop/spring-aop-3.0.xsd">
	
	<context:annotation-config/>
		<aop:aspectj-autoproxy/>
		<bean id="hello" class="com.jlcindia.spring.aop.HelloService"/>
		<bean id="log" class="com.jlcindia.spring.aop.LogAdvice"/>
		<bean id="security" class="com.jlcindia.spring.aop.SecurityAdvice"/>
		
		<aop:config>
		<aop:pointcut expression="execution(* *.m*(..))" id="logPC"/>
		<aop:pointcut expression="execution(* *.am*(..)) and args(p1,p2)" id="SecurityPC"/>
		
		<aop:aspect ref="log">
		<aop:before method="logParams" pointcut="execution(* *.m*(..)) and args(p1,p2)"/>
		<aop:after-returning returning="msg" method="logReturnValue" pointcut-ref="logPC"/>
		<aop:after-throwing  throwing="e" method="logException" pointcut-ref="logPC"/>
		<aop:after method="log" pointcut="execution(* *.m*(..))"/>
		</aop:aspect>
		
		<aop:aspect ref="security">
		<aop:around method="verifyUser" pointcut-ref="SecurityPC"/>
		</aop:aspect>
		</aop:config>
</beans>