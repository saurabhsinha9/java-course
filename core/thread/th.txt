Compiled from "Thread.java"
public class java.lang.Thread extends java.lang.Object implements java.lang.Runnable{
    java.lang.ThreadLocal$ThreadLocalMap threadLocals;
    java.lang.ThreadLocal$ThreadLocalMap inheritableThreadLocals;
    public static final int MIN_PRIORITY;
    public static final int NORM_PRIORITY;
    public static final int MAX_PRIORITY;
    public static int activeCount();
    public native int countStackFrames();
    public final int getPriority();
    static {};
    public java.lang.Thread();
    public final void checkAccess();
    public void destroy();
    public static void dumpStack();
    public void interrupt();
    public final void join();
       throws java/lang/InterruptedException
    public final void resume();
    public void run();
    public synchronized native void start();
    public final void stop();
    public final void suspend();
    public static native void yield();
    public static boolean interrupted();
    public final native boolean isAlive();
    public final boolean isDaemon();
    public boolean isInterrupted();
    public final void setPriority(int);
    public final synchronized void join(long);
       throws java/lang/InterruptedException
    public static native void sleep(long);
       throws java/lang/InterruptedException
    public final synchronized void join(long,int);
       throws java/lang/InterruptedException
    public static void sleep(long,int);
       throws java/lang/InterruptedException
    public final void setDaemon(boolean);
    public java.lang.ClassLoader getContextClassLoader();
    public void setContextClassLoader(java.lang.ClassLoader);
    public static native boolean holdsLock(java.lang.Object);
    public java.lang.Thread(java.lang.Runnable);
    public final java.lang.String getName();
    public java.lang.String toString();
    public java.lang.Thread(java.lang.String);
    public final void setName(java.lang.String);
    public static native java.lang.Thread currentThread();
    public static int enumerate(java.lang.Thread[]);
    public final java.lang.ThreadGroup getThreadGroup();
    public final synchronized void stop(java.lang.Throwable);
    public java.lang.Thread(java.lang.ThreadGroup,java.lang.Runnable);
    public java.lang.Thread(java.lang.Runnable,java.lang.String);
    public java.lang.Thread(java.lang.ThreadGroup,java.lang.String);
    public java.lang.Thread(java.lang.ThreadGroup,java.lang.Runnable,java.lang.String);
    public java.lang.Thread(java.lang.ThreadGroup,java.lang.Runnable,java.lang.String,long);
}

